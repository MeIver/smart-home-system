name: API Documentation Generation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/templates/**'
      - 'scripts/**'
      - '.github/workflows/api-docs-generation.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/templates/**'
      - 'scripts/**'
  workflow_dispatch:  # Allow manual triggering
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight

jobs:
  generate-api-docs:
    name: Generate API Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Generate API documentation
      run: |
        python scripts/generate-api-docs.py --generate

    - name: Validate documentation format
      run: |
        python scripts/generate-api-docs.py --validate

    - name: Upload generated documentation
      uses: actions/upload-artifact@v4
      with:
        name: api-documentation
        path: docs/api/
        retention-days: 7

    - name: Create validation report
      run: |
        echo "## API Documentation Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "Generated on $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "docs/api/validation-report.json" ]; then
          echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
          cat docs/api/validation-report.json | jq -r '
            "- **Valid**: " + (.valid | tostring) + "\n" +
            "- **Sections Found**: " + (.sections_found | join(", ")) + "\n" +
            "- **Errors**: " + (.errors | length | tostring) + "\n" +
            "- **Warnings**: " + (.warnings | length | tostring) + "\n"
          ' >> $GITHUB_STEP_SUMMARY
          
          if .errors | length > 0 then
            echo "### Errors" >> $GITHUB_STEP_SUMMARY
            .errors[] | "- " + . >> $GITHUB_STEP_SUMMARY
          else
            echo "### Errors" >> $GITHUB_STEP_SUMMARY
            echo "No errors found ✅" >> $GITHUB_STEP_SUMMARY
          end
          
          if .warnings | length > 0 then
            echo "### Warnings" >> $GITHUB_STEP_SUMMARY
            .warnings[] | "- " + . >> $GITHUB_STEP_SUMMARY
          else
            echo "### Warnings" >> $GITHUB_STEP_SUMMARY
            echo "No warnings found ✅" >> $GITHUB_STEP_SUMMARY
          end
        ' < docs/api/validation-report.json >> $GITHUB_STEP_SUMMARY
        else
          echo "Validation report not found!" >> $GITHUB_STEP_SUMMARY
          echo "Documentation generation may have failed." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Commit generated documentation
      if: github.ref == 'refs/heads/main' && success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet -- docs/api/; then
          echo "No changes to commit"
        else
          git add docs/api/
          git commit -m "docs: auto-generate API documentation [skip ci]"
          git push
        fi

  validate-docs:
    name: Validate Documentation Quality
    runs-on: ubuntu-latest
    needs: generate-api-docs
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download generated documentation
      uses: actions/download-artifact@v4
      with:
        name: api-documentation
        path: docs/api/

    - name: Check documentation quality
      run: |
        echo "## Documentation Quality Check" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if documentation file exists
        if [ -f "docs/api/endpoints.md" ]; then
          echo "✅ Documentation file exists" >> $GITHUB_STEP_SUMMARY
          
          # Check file size
          file_size=$(wc -c < "docs/api/endpoints.md")
          echo "- File size: $file_size bytes" >> $GITHUB_STEP_SUMMARY
          
          # Check line count
          line_count=$(wc -l < "docs/api/endpoints.md")
          echo "- Line count: $line_count lines" >> $GITHUB_STEP_SUMMARY
          
          # Check for required sections
          sections=("Overview" "Authentication" "Endpoints" "Request/Response Examples" "Error Codes")
          for section in "${sections[@]}"; do
            if grep -q "## $section" "docs/api/endpoints.md"; then
              echo "✅ Section '$section' found" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Section '$section' missing" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Check for code examples
          http_examples=$(grep -c '```http' "docs/api/endpoints.md" || true)
          json_examples=$(grep -c '```json' "docs/api/endpoints.md" || true)
          echo "- HTTP examples: $http_examples" >> $GITHUB_STEP_SUMMARY
          echo "- JSON examples: $json_examples" >> $GITHUB_STEP_SUMMARY
          
        else
          echo "❌ Documentation file not found" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: generate-api-docs
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download generated documentation
      uses: actions/download-artifact@v4
      with:
        name: api-documentation
        path: docs/api/

    - name: Scan for sensitive information
      run: |
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "docs/api/endpoints.md" ]; then
          # Check for potential API keys or secrets
          sensitive_patterns=(
            "[A-Za-z0-9]{32,}"  # Long strings that might be API keys
            "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"  # UUIDs
            "sk_"  # Stripe-like keys
            "pk_"  # Stripe-like keys
            "AKIA[0-9A-Z]{16}"  # AWS access keys
          )
          
          found_sensitive=false
          for pattern in "${sensitive_patterns[@]}"; do
            if grep -E "$pattern" "docs/api/endpoints.md"; then
              echo "⚠️  Potential sensitive information found with pattern: $pattern" >> $GITHUB_STEP_SUMMARY
              found_sensitive=true
            fi
          done
          
          if [ "$found_sensitive" = false ]; then
            echo "✅ No sensitive information detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for hardcoded credentials in examples
          if grep -i "password\|secret\|token\|key" "docs/api/endpoints.md" | grep -v "YOUR_\|example\|placeholder"; then
            echo "⚠️  Potential hardcoded credentials found" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No hardcoded credentials detected" >> $GITHUB_STEP_SUMMARY
          fi
          
        else
          echo "❌ Documentation file not found for security scan" >> $GITHUB_STEP_SUMMARY
        fi